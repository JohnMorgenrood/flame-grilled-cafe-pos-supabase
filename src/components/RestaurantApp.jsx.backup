import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useCategories } from '../context/CategoriesContext';
import { useOrders } from '../context/OrdersContext';
import { useInventory } from '../contexts/InventoryContext';
import { useCurrency } from '../hooks/useCurrency';
import { collection, getDocs, query, where } from 'firebase/firestore';
import { db } from '../firebase/firebase';
import {
  ShoppingCart,
  Plus,
  Minus,
  X,
  Clock,
  Star,
  User,
  CreditCard,
  CheckCircle,
  ArrowLeft,
  Search,
  Filter,
  Flame,
  Award,
  Truck,
  Zap
} from 'lucide-react';

const RestaurantApp = () => {
  const navigate = useNavigate();
  const { categories } = useCategories();
  const { createOrder } = useOrders();
  const { deductStock, stockAlerts } = useInventory();
  const { formatCurrency } = useCurrency();
  const [currentView, setCurrentView] = useState('menu');
  const [selectedCategory, setSelectedCategory] = useState(categories[0]?.id || 'specials');
  const [cart, setCart] = useState([]);
  const [customerInfo, setCustomerInfo] = useState({
    name: '',
    phone: ''
  });
  const [isProcessingPayment, setIsProcessingPayment] = useState(false);
  const [menuItems, setMenuItems] = useState([]);
  const [loading, setLoading] = useState(true);

  // Fetch menu items from Firebase
  useEffect(() => {
    const fetchMenuItems = async () => {
      try {
        setLoading(true);
        const querySnapshot = await getDocs(collection(db, 'menu'));
        const items = querySnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        }));
        // Only show available items to customers
        const availableItems = items.filter(item => item.available !== false);
        setMenuItems(availableItems);
      } catch (error) {
        console.error('Error fetching menu items:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchMenuItems();
  }, []);

  // Menu items are now fetched from Firebase above
    specials: [
      {
        id: 1,
        name: 'Bacon, Egg, Cheese & Hash Brown Brekkie Roll',
        price: 50,
        image: 'ÔøΩ',
        description: 'Bacon, egg, cheese and hash brown in a fresh roll',
        popular: true,
        rating: 4.8,
        prepTime: '8-12 min',
        calories: 520
      },
      {
        id: 2,
        name: 'Bacon, Egg & Cheese Burger & Chips',
        price: 75,
        image: 'üçî',
        description: 'Classic breakfast burger served with crispy chips',
        popular: true,
        rating: 4.7,
        prepTime: '12-15 min',
        calories: 680
      },
      {
        id: 3,
        name: 'Chicken Mayo, Cheese & Bacon Tramezzini',
        price: 75,
        image: 'ü•™',
        description: 'Delicious tramezzini with chicken mayo, cheese and bacon',
        rating: 4.6,
        prepTime: '8-10 min',
        calories: 450
      },
      {
        id: 4,
        name: 'Crumbed Chicken Cheese Mushroom Burger',
        price: 70,
        image: 'üçî',
        description: 'Crumbed chicken with cheese and mushroom sauce',
        rating: 4.5,
        prepTime: '12-15 min',
        calories: 580
      },
      {
        id: 5,
        name: 'Loaded Chicken, Cheese & Bacon Fries',
        price: 60,
        image: 'üçü',
        description: 'Hand-cut fries loaded with chicken, cheese and bacon',
        popular: true,
        rating: 4.9,
        prepTime: '10-12 min',
        calories: 720
      }
    ],
    brekkie: [
      {
        id: 6,
        name: 'Egg Roll',
        price: 24,
        image: 'ü•ö',
        description: 'Fresh egg roll',
        rating: 4.3,
        prepTime: '5-8 min',
        calories: 280
      },
      {
        id: 7,
        name: 'Bacon Roll',
        price: 35,
        image: 'ü•ì',
        description: 'Crispy bacon in a fresh roll',
        rating: 4.4,
        prepTime: '6-8 min',
        calories: 320
      },
      {
        id: 8,
        name: 'Bacon & Egg Roll',
        price: 43,
        image: 'üç≥',
        description: 'Bacon and egg in a fresh roll',
        rating: 4.5,
        prepTime: '8-10 min',
        calories: 380
      },
      {
        id: 9,
        name: 'Bacon, Egg & Cheese Roll',
        price: 49,
        image: 'ÔøΩ',
        description: 'Bacon, egg and cheese in a fresh roll',
        rating: 4.6,
        prepTime: '8-10 min',
        calories: 420
      },
      {
        id: 10,
        name: 'Bacon, Egg, Cheese & Hash Brown Roll',
        price: 60,
        image: 'ÔøΩ',
        description: 'Complete breakfast roll with hash brown',
        popular: true,
        rating: 4.7,
        prepTime: '10-12 min',
        calories: 520
      }
    ],
    sandwiches: [
      {
        id: 11,
        name: 'Toasted Cheese Sandwich',
        price: 39,
        image: 'üßÄ',
        description: 'Classic toasted cheese sandwich',
        rating: 4.2,
        prepTime: '5-8 min',
        calories: 320
      },
      {
        id: 12,
        name: 'Toasted Cheese & Tomato Sandwich',
        price: 45,
        image: 'üçÖ',
        description: 'Cheese and tomato toasted sandwich',
        rating: 4.3,
        prepTime: '5-8 min',
        calories: 340
      },
      {
        id: 13,
        name: 'Toasted Bacon & Cheese Sandwich',
        price: 56,
        image: 'ü•ì',
        description: 'Bacon and cheese toasted sandwich',
        rating: 4.5,
        prepTime: '8-10 min',
        calories: 420
      },
      {
        id: 14,
        name: 'Toasted Chicken Mayonnaise Sandwich',
        price: 65,
        image: 'üçó',
        description: 'Chicken mayonnaise toasted sandwich',
        rating: 4.6,
        prepTime: '8-10 min',
        calories: 450
      },
      {
        id: 15,
        name: 'Toasted Chicken Mayo, Cheese & Bacon Sandwich',
        price: 82,
        image: 'ü•™',
        description: 'Chicken mayo, cheese and bacon toasted sandwich',
        popular: true,
        rating: 4.8,
        prepTime: '10-12 min',
        calories: 520
      }
    ],
    tramezzini: [
      {
        id: 16,
        name: 'Biltong, Cream Cheese, Peppadew & Sweet Chili Tramezzini',
        price: 82,
        image: 'ü•©',
        description: 'Gourmet tramezzini with biltong, cream cheese, peppadew and sweet chili',
        popular: true,
        rating: 4.8,
        prepTime: '8-10 min',
        calories: 480
      },
      {
        id: 17,
        name: 'Bacon, Avo, Feta & Sweet Chili Mayo Tramezzini',
        price: 82,
        image: 'ÔøΩ',
        description: 'Bacon, avocado, feta and sweet chili mayo tramezzini',
        rating: 4.7,
        prepTime: '8-10 min',
        calories: 520
      },
      {
        id: 18,
        name: 'Jalapeno, Bacon, Cream Cheese, Feta & Sweet Chili Mayo Tramezzini',
        price: 82,
        image: 'üå∂Ô∏è',
        description: 'Spicy tramezzini with jalapeno, bacon, cream cheese and feta',
        rating: 4.6,
        prepTime: '8-10 min',
        calories: 540
      },
      {
        id: 19,
        name: 'Grilled Chicken, Bacon, Chipotle Mayo Tramezzini',
        price: 85,
        image: 'ÔøΩ',
        description: 'Grilled chicken, bacon, chipotle mayo, tomato, red onion and cheese',
        popular: true,
        rating: 4.9,
        prepTime: '10-12 min',
        calories: 580
      }
    ],
    burgers: [
      {
        id: 20,
        name: 'Classic Beef Burger',
        price: 66,
        image: 'üçî',
        description: 'Flame grilled beef patty, lettuce, onions, tomato basted with BBQ sauce',
        rating: 4.5,
        prepTime: '12-15 min',
        calories: 520
      },
      {
        id: 21,
        name: 'Cheese Beef Burger',
        price: 75,
        image: 'üßÄ',
        description: 'Flame grilled beef patty with cheddar cheese, lettuce, onions, tomato',
        rating: 4.6,
        prepTime: '12-15 min',
        calories: 580
      },
      {
        id: 22,
        name: 'Bacon & Cheese Beef Burger',
        price: 90,
        image: 'ü•ì',
        description: 'Flame grilled beef patty, cheddar cheese, bacon, lettuce, onions, tomato',
        popular: true,
        rating: 4.8,
        prepTime: '15-18 min',
        calories: 650
      },
      {
        id: 23,
        name: 'Dagwood Burger - Old Timer',
        price: 102,
        image: 'üçî',
        description: 'Made on 2 slices of toast, beef patty, bacon, ham, cheese, egg, lettuce',
        popular: true,
        rating: 4.9,
        prepTime: '18-20 min',
        calories: 820
      },
      {
        id: 24,
        name: 'Double Cheese Burger',
        price: 104,
        image: 'üçî',
        description: '2 Flame grilled beef patties with cheese, lettuce, onions, tomato',
        rating: 4.7,
        prepTime: '15-18 min',
        calories: 750
      }
    ],
    chicken: [
      {
        id: 25,
        name: 'Crumbed Chicken Burger',
        price: 73,
        image: 'üçó',
        description: 'Crumbed chicken fillet, lettuce, onions, tomato with tangy mayo',
        rating: 4.5,
        prepTime: '12-15 min',
        calories: 520
      },
      {
        id: 26,
        name: 'Crumbed Chicken Cheese Burger',
        price: 80,
        image: 'üßÄ',
        description: 'Crumbed chicken fillet with cheese, lettuce, onions, tomato',
        rating: 4.6,
        prepTime: '12-15 min',
        calories: 580
      },
      {
        id: 27,
        name: 'Crumbed Chicken Cheese & Bacon Burger',
        price: 98,
        image: 'ü•ì',
        description: 'Crumbed chicken fillet, cheese, bacon, lettuce, onions, tomato',
        popular: true,
        rating: 4.8,
        prepTime: '15-18 min',
        calories: 680
      },
      {
        id: 28,
        name: 'Chicken Schnitzel',
        price: 89,
        image: 'ÔøΩÔ∏è',
        description: 'Chicken schnitzel with chips or salad',
        rating: 4.7,
        prepTime: '15-18 min',
        calories: 620
      },
      {
        id: 29,
        name: 'Crumbed Chicken Strips',
        price: 69,
        image: 'üçó',
        description: 'Crumbed chicken strips with chips',
        rating: 4.6,
        prepTime: '12-15 min',
        calories: 520
      }
    ],
    wraps: [
      {
        id: 30,
        name: 'Sunrise Surprise Wrap',
        price: 60,
        image: 'üåØ',
        description: 'Scrambled eggs, bacon, cheese and tomato',
        rating: 4.5,
        prepTime: '8-10 min',
        calories: 480
      },
      {
        id: 31,
        name: 'Sunshine Brekkie Wrap',
        price: 78,
        image: 'ÔøΩ',
        description: 'Scrambled eggs, bacon, cheddar, tomato, feta and avocado',
        popular: true,
        rating: 4.7,
        prepTime: '10-12 min',
        calories: 580
      },
      {
        id: 32,
        name: 'Chicken Wrap',
        price: 72,
        image: 'ÔøΩ',
        description: 'Grilled/crumbed chicken, lettuce, tomato, cucumber, red onion, feta',
        rating: 4.6,
        prepTime: '10-12 min',
        calories: 520
      },
      {
        id: 33,
        name: 'Peri-Peri Chicken, Feta, Avocado Wrap',
        price: 94,
        image: 'üî•',
        description: 'Peri-peri chicken, feta, avocado, cream cheese, peppadew and jalapeno',
        popular: true,
        rating: 4.8,
        prepTime: '12-15 min',
        calories: 620
      }
    ],
    salads: [
      {
        id: 34,
        name: 'Greek Salad',
        price: 69,
        image: 'ü•ó',
        description: 'Lettuce, peppers, red onion, tomato, cucumber, olives and feta',
        rating: 4.4,
        prepTime: '5-8 min',
        calories: 320
      },
      {
        id: 35,
        name: 'Chicken Salad',
        price: 80,
        image: 'üçó',
        description: 'Grilled/crumbed chicken, lettuce, tomato, red onion, feta and seeds',
        rating: 4.6,
        prepTime: '8-10 min',
        calories: 420
      },
      {
        id: 36,
        name: 'Bacon, Avo & Feta Salad',
        price: 85,
        image: 'ÔøΩ',
        description: 'Bacon, lettuce, tomato, red onion, peppadew and seeds',
        rating: 4.5,
        prepTime: '8-10 min',
        calories: 480
      },
      {
        id: 37,
        name: 'Chicken Caesar Salad',
        price: 99,
        image: 'üëë',
        description: 'Grilled chicken, cheddar cheese, croutons, caesar dressing',
        popular: true,
        rating: 4.8,
        prepTime: '10-12 min',
        calories: 520
      }
    ],
    chips: [
      {
        id: 38,
        name: 'Hand Cut Chips',
        price: 37,
        image: 'üçü',
        description: 'Crispy hand-cut potato chips',
        rating: 4.6,
        prepTime: '8-10 min',
        calories: 320
      },
      {
        id: 39,
        name: 'Bacon & Cheese Chips',
        price: 53,
        image: 'üßÄ',
        description: 'Hand-cut chips with bacon and cheese sauce',
        popular: true,
        rating: 4.7,
        prepTime: '10-12 min',
        calories: 520
      },
      {
        id: 40,
        name: 'Bacon & Mushroom Chips',
        price: 53,
        image: 'ÔøΩ',
        description: 'Hand-cut chips with bacon and mushroom sauce',
        rating: 4.6,
        prepTime: '10-12 min',
        calories: 480
      }
    ],
    beverages: [
      {
        id: 41,
        name: 'Americano',
        price: 20,
        image: '‚òï',
        description: 'Classic black coffee',
        rating: 4.3,
        prepTime: '3-5 min',
        calories: 5
      },
      {
        id: 42,
        name: 'Cappuccino',
        price: 20,
        image: '‚òï',
        description: 'Espresso with steamed milk and foam',
        rating: 4.5,
        prepTime: '3-5 min',
        calories: 120
      },
      {
        id: 43,
        name: 'Latte',
        price: 22,
        image: 'ü•õ',
        description: 'Espresso with steamed milk',
        rating: 4.4,
        prepTime: '3-5 min',
        calories: 150
      },
      {
        id: 44,
        name: 'Chocolate Milkshake',
        price: 35,
        image: 'üç´',
        description: 'Rich chocolate milkshake',
        popular: true,
        rating: 4.7,
        prepTime: '3-5 min',
        calories: 350
      },
      {
        id: 45,
        name: 'Vanilla Milkshake',
        price: 35,
        image: 'üç¶',
        description: 'Creamy vanilla milkshake',
        rating: 4.6,
        prepTime: '3-5 min',
        calories: 320
      },
      {
        id: 46,
        name: 'Strawberry Milkshake',
        price: 35,
        image: 'üçì',
        description: 'Fresh strawberry milkshake',
        rating: 4.6,
        prepTime: '3-5 min',
        calories: 340
      }
    ]
  };

  // Cart Functions
  const addToCart = (item) => {
    const existingItem = cart.find(cartItem => cartItem.id === item.id);
    if (existingItem) {
      setCart(cart.map(cartItem =>
        cartItem.id === item.id
          ? { ...cartItem, quantity: cartItem.quantity + 1 }
          : cartItem
      ));
    } else {
      setCart([...cart, { ...item, quantity: 1 }]);
    }
  };

  const removeFromCart = (itemId) => {
    setCart(cart.filter(item => item.id !== itemId));
  };

  const updateQuantity = (itemId, newQuantity) => {
    if (newQuantity === 0) {
      removeFromCart(itemId);
    } else {
      setCart(cart.map(item =>
        item.id === itemId ? { ...item, quantity: newQuantity } : item
      ));
    }
  };

  const getTotalPrice = () => {
    return cart.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  const getTotalItems = () => {
    return cart.reduce((total, item) => total + item.quantity, 0);
  };

  const filteredItems = menuItems[selectedCategory] || [];

  const handleOrder = async () => {
    if (!customerInfo.name || !customerInfo.phone || cart.length === 0) return;
    
    setIsProcessingPayment(true);
    
    try {
      // Simulate PayPal payment processing
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Create order with real data
      const orderData = {
        items: cart,
        customer: customerInfo,
        total: getTotalPrice(),
        paymentMethod: 'PayPal',
        paymentStatus: 'completed'
      };
      
      const newOrder = createOrder(orderData);
      
      // Deduct inventory stock for ordered items
      deductStock(cart);
      
      // Show confirmation
      setCurrentView('orderConfirm');
      
      // Clear cart and redirect to dashboard after showing confirmation
      setTimeout(() => {
        setCart([]);
        setCustomerInfo({ name: '', phone: '' });
        navigate(`/dashboard?order=${newOrder.id}`);
      }, 3000);
      
    } catch (error) {
      console.error('Payment failed:', error);
      alert('Payment failed. Please try again.');
    } finally {
      setIsProcessingPayment(false);
    }
  };

  // Header Component
  const Header = () => (
    <div className="bg-gradient-to-r from-slate-900 via-purple-900 to-slate-900 text-white relative overflow-hidden">
      <div className="absolute inset-0 bg-gradient-to-r from-red-600/20 to-orange-600/20"></div>
      <div className="absolute top-0 left-0 w-full h-full">
        <div className="absolute top-4 left-4 w-32 h-32 bg-gradient-to-r from-red-500/30 to-orange-500/30 rounded-full blur-xl"></div>
        <div className="absolute bottom-4 right-4 w-24 h-24 bg-gradient-to-r from-purple-500/30 to-pink-500/30 rounded-full blur-xl"></div>
      </div>
      
      <div className="relative p-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="w-12 h-12 bg-gradient-to-r from-red-500 to-orange-500 rounded-2xl flex items-center justify-center shadow-lg">
              <Flame className="w-6 h-6 text-white" />
            </div>
            <div>
              <h1 className="text-2xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
                Flame Grilled Cafe
              </h1>
              <p className="text-sm text-gray-300 flex items-center space-x-1">
                <Zap className="w-3 h-3" />
                <span>Flame-grilled perfection</span>
              </p>
            </div>
          </div>
          
          <div className="flex items-center space-x-3">
            <button
              onClick={() => setCurrentView('cart')}
              className="relative bg-white/10 backdrop-blur-lg p-3 rounded-2xl border border-white/20 hover:bg-white/20 transition-all duration-300 shadow-lg"
            >
              <ShoppingCart className="w-6 h-6" />
              {getTotalItems() > 0 && (
                <div className="absolute -top-2 -right-2 bg-gradient-to-r from-red-500 to-orange-500 text-white text-xs font-bold rounded-full w-6 h-6 flex items-center justify-center shadow-lg animate-pulse">
                  {getTotalItems()}
                </div>
              )}
            </button>
            
            <button
              onClick={() => navigate('/login')}
              className="bg-white/10 backdrop-blur-lg p-3 rounded-2xl border border-white/20 hover:bg-white/20 transition-all duration-300 shadow-lg"
            >
              <User className="w-6 h-6" />
            </button>
          </div>
        </div>
        
        <div className="mt-4 flex items-center justify-center space-x-6 text-sm">
          <div className="flex items-center space-x-1 bg-white/10 rounded-full px-3 py-1">
            <Clock className="w-4 h-4" />
            <span>15-30 min</span>
          </div>
          <div className="flex items-center space-x-1 bg-white/10 rounded-full px-3 py-1">
            <Star className="w-4 h-4 fill-yellow-400 text-yellow-400" />
            <span>4.8 Rating</span>
          </div>
          <div className="flex items-center space-x-1 bg-white/10 rounded-full px-3 py-1">
            <Truck className="w-4 h-4" />
            <span>Free Delivery</span>
          </div>
        </div>
      </div>
    </div>
  );

  // Category Tabs
  const CategoryTabs = () => (
    <div className="bg-white p-4 shadow-sm">
      <div className="flex space-x-2 overflow-x-auto scrollbar-hide pb-2" style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}>
        {categories.map((category) => {
          const isSelected = selectedCategory === category.id;
          return (
            <button
              key={category.id}
              onClick={() => setSelectedCategory(category.id)}
              className={`flex items-center space-x-2 px-4 py-2.5 rounded-2xl whitespace-nowrap transition-all duration-300 transform hover:scale-105 min-w-max ${
                isSelected
                  ? `bg-gradient-to-r ${category.gradient} text-white shadow-lg`
                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
              }`}
            >
              <span className="text-base">{category.icon}</span>
              <span className="font-medium text-sm">{category.name}</span>
            </button>
          );
        })}
      </div>
    </div>
  );

  // Menu Item Card
  const MenuItemCard = ({ item }) => (
    <div className="bg-white rounded-3xl shadow-sm border border-gray-100 overflow-hidden hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 h-full flex flex-col menu-card">
      {/* Food Image */}
      <div className="relative h-48 bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center">
        <div className="food-emoji text-6xl lg:text-8xl transform hover:scale-110 transition-transform duration-300">
          {item.image}
        </div>
        {item.popular && (
          <div className="absolute top-3 left-3 bg-gradient-to-r from-red-500 to-orange-500 text-white text-xs px-3 py-1 rounded-full font-bold flex items-center space-x-1 shadow-lg">
            <Award className="w-3 h-3" />
            <span>Popular</span>
          </div>
        )}
      </div>
      
      <div className="p-6 flex-1 flex flex-col">
        <div className="flex-1">
          <h3 className="menu-title font-bold text-gray-900 text-lg lg:text-xl mb-2 line-clamp-2">{item.name}</h3>
          <p className="menu-description text-gray-600 text-sm mb-3 line-clamp-2">{item.description}</p>
          
          <div className="flex items-center space-x-4 mb-4 text-sm text-gray-500">
            <div className="flex items-center space-x-1 rating-badge px-2 py-1 rounded-full text-xs lg:text-sm">
              <Star className="w-4 h-4 fill-yellow-400 text-yellow-400" />
              <span>{item.rating}</span>
            </div>
            <div className="flex items-center space-x-1">
              <Clock className="w-4 h-4" />
              <span>{item.prepTime}</span>
            </div>
            {item.calories && (
              <div className="text-xs bg-gray-100 px-2 py-1 rounded-full">
                {item.calories} cal
              </div>
            )}
          </div>
        </div>
        
        <div className="flex items-center justify-between pt-3 border-t border-gray-100">
          <span className="price-tag text-xl lg:text-2xl font-bold">
            {formatCurrency(item.price)}
          </span>
          <button
            onClick={() => addToCart(item)}
            className="bg-gradient-to-r from-red-600 to-orange-600 hover:from-red-700 hover:to-orange-700 text-white py-2 px-4 lg:py-3 lg:px-6 rounded-xl font-bold transition-all duration-300 flex items-center space-x-2 shadow-lg hover:shadow-xl transform hover:scale-105"
          >
            <Plus className="w-4 h-4" />
            <span>Add</span>
          </button>
        </div>
      </div>
    </div>
  );

  // Cart View
  const CartView = () => (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      <div className="bg-white/90 backdrop-blur-lg p-4 border-b border-gray-200 sticky top-0 z-10">
        <div className="flex items-center space-x-3">
          <button onClick={() => setCurrentView('menu')} className="p-2 hover:bg-gray-100 rounded-xl">
            <ArrowLeft className="w-5 h-5" />
          </button>
          <h2 className="text-xl font-bold">Your Cart</h2>
          <div className="ml-auto bg-red-100 text-red-600 px-3 py-1 rounded-full text-sm font-medium">
            {getTotalItems()} items
          </div>
        </div>
      </div>

      {cart.length === 0 ? (
        <div className="text-center py-16 px-4">
          <div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <ShoppingCart className="w-12 h-12 text-gray-300" />
          </div>
          <h3 className="text-2xl font-bold text-gray-900 mb-2">Your cart is empty</h3>
          <p className="text-gray-600 mb-8">Add some delicious items to get started!</p>
          <button
            onClick={() => setCurrentView('menu')}
            className="bg-gradient-to-r from-red-600 to-orange-600 hover:from-red-700 hover:to-orange-700 text-white px-8 py-3 rounded-2xl font-bold"
          >
            Browse Menu
          </button>
        </div>
      ) : (
        <div className="p-4 space-y-4">
          {cart.map((item) => (
            <div key={item.id} className="bg-white rounded-2xl p-4 shadow-sm border border-gray-100">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3 flex-1">
                  <div className="text-3xl bg-gray-50 rounded-xl p-2">{item.image}</div>
                  <div className="flex-1">
                    <h3 className="font-semibold text-gray-900">{item.name}</h3>
                    <p className="text-red-600 font-bold">{formatCurrency(item.price)} each</p>
                  </div>
                </div>
                <div className="flex items-center space-x-3">
                  <div className="flex items-center space-x-2 bg-gray-50 rounded-xl p-1">
                    <button onClick={() => updateQuantity(item.id, item.quantity - 1)} className="p-2 hover:bg-white rounded-lg">
                      <Minus className="w-4 h-4" />
                    </button>
                    <span className="w-8 text-center font-bold">{item.quantity}</span>
                    <button onClick={() => updateQuantity(item.id, item.quantity + 1)} className="p-2 hover:bg-white rounded-lg">
                      <Plus className="w-4 h-4" />
                    </button>
                  </div>
                  <button onClick={() => removeFromCart(item.id)} className="p-2 hover:bg-red-100 text-red-600 rounded-xl">
                    <X className="w-4 h-4" />
                  </button>
                </div>
              </div>
              <div className="mt-3 pt-3 border-t border-gray-100 flex justify-between items-center">
                <span className="text-gray-600">Subtotal:</span>
                <span className="font-bold text-lg">{formatCurrency(item.price * item.quantity)}</span>
              </div>
            </div>
          ))}

          <div className="bg-gradient-to-r from-red-50 to-orange-50 rounded-2xl p-6 border border-red-100">
            <div className="flex justify-between items-center mb-4">
              <span className="text-xl font-bold text-gray-900">Total:</span>
              <span className="text-3xl font-bold bg-gradient-to-r from-red-600 to-orange-600 bg-clip-text text-transparent">
                {formatCurrency(getTotalPrice())}
              </span>
            </div>
            <button
              onClick={() => setCurrentView('checkout')}
              className="w-full bg-gradient-to-r from-red-600 to-orange-600 hover:from-red-700 hover:to-orange-700 text-white py-4 px-6 rounded-2xl font-bold text-lg shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300"
            >
              Proceed to Checkout
            </button>
          </div>
        </div>
      )}
    </div>
  );

  // Checkout View
  const CheckoutView = () => (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-4">
      <div className="bg-white rounded-2xl p-6 max-w-md mx-auto">
        <div className="flex items-center space-x-3 mb-6">
          <button onClick={() => setCurrentView('cart')} className="p-2 hover:bg-gray-100 rounded-xl">
            <ArrowLeft className="w-5 h-5" />
          </button>
          <h2 className="text-xl font-bold">Checkout</h2>
        </div>
        
        <div className="space-y-4 mb-6">
          <input
            type="text"
            placeholder="Your Name"
            value={customerInfo.name}
            onChange={(e) => setCustomerInfo({...customerInfo, name: e.target.value})}
            className="w-full p-4 border-2 border-gray-100 rounded-2xl focus:outline-none focus:border-red-500"
          />
          <input
            type="tel"
            placeholder="Phone Number"
            value={customerInfo.phone}
            onChange={(e) => setCustomerInfo({...customerInfo, phone: e.target.value})}
            className="w-full p-4 border-2 border-gray-100 rounded-2xl focus:outline-none focus:border-red-500"
          />
        </div>
        
        <div className="mb-6">
          <h3 className="font-bold mb-3">Order Summary</h3>
          {cart.map((item) => (
            <div key={item.id} className="flex justify-between mb-2">
              <span>{item.quantity}x {item.name}</span>
              <span>{formatCurrency(item.price * item.quantity)}</span>
            </div>
          ))}
          <div className="border-t pt-2 font-bold">
            Total: {formatCurrency(getTotalPrice())}
          </div>
        </div>
        
        <button
          onClick={handleOrder}
          disabled={!customerInfo.name || !customerInfo.phone || isProcessingPayment}
          className="w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 disabled:from-gray-300 disabled:to-gray-400 text-white py-4 rounded-2xl font-bold flex items-center justify-center space-x-2"
        >
          {isProcessingPayment ? (
            <>
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
              <span>Processing Payment...</span>
            </>
          ) : (
            <>
              <span>üí≥</span>
              <span>Pay with PayPal - {formatCurrency(getTotalPrice())}</span>
            </>
          )}
        </button>
      </div>
    </div>
  );

  // Order Confirmation
  const OrderConfirmView = () => (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-3xl p-8 shadow-2xl text-center max-w-md w-full">
        <div className="w-20 h-20 bg-gradient-to-r from-green-400 to-blue-500 rounded-full flex items-center justify-center mx-auto mb-6 animate-pulse">
          <CheckCircle className="w-10 h-10 text-white" />
        </div>
        <h2 className="text-3xl font-bold text-gray-900 mb-3">Order Confirmed!</h2>
        <p className="text-gray-600 mb-6">
          Thank you for your order. We'll prepare it with care and notify you when it's ready.
        </p>
        <div className="bg-gradient-to-r from-gray-50 to-gray-100 rounded-2xl p-4 mb-6">
          <p className="text-sm text-gray-600 mb-1">Order Total</p>
          <p className="text-3xl font-bold bg-gradient-to-r from-red-600 to-orange-600 bg-clip-text text-transparent">
            {formatCurrency(getTotalPrice())}
          </p>
        </div>
        <div className="text-sm text-gray-500 animate-pulse">
          Redirecting to your dashboard...
        </div>
      </div>
    </div>
  );

  // Main Menu View
  const MenuView = () => (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      <Header />
      
      {/* Stock Alerts Banner */}
      {stockAlerts.length > 0 && (
        <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 mx-4 mt-4 rounded-lg">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <svg className="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-sm text-yellow-700">
                <strong>Low Stock Alert:</strong> {stockAlerts.length} ingredient{stockAlerts.length > 1 ? 's' : ''} running low. 
                <span className="ml-2 text-yellow-600">Please check inventory.</span>
              </p>
            </div>
          </div>
        </div>
      )}
      
      <CategoryTabs />
      
      <div className="p-4 max-w-7xl mx-auto">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {filteredItems.map((item) => (
            <MenuItemCard key={item.id} item={item} />
          ))}
        </div>
        
        {filteredItems.length === 0 && (
          <div className="text-center py-16">
            <p className="text-gray-500 text-lg">No items available in this category</p>
          </div>
        )}
      </div>

      {/* Floating Cart Button */}
      {cart.length > 0 && currentView === 'menu' && (
        <button
          onClick={() => setCurrentView('cart')}
          className="fixed bottom-4 right-4 bg-gradient-to-r from-red-600 to-orange-600 hover:from-red-700 hover:to-orange-700 text-white p-3 rounded-2xl shadow-2xl flex items-center space-x-2 z-50 transform hover:scale-110 transition-all duration-300 max-w-xs"
        >
          <ShoppingCart className="w-5 h-5" />
          <div className="flex flex-col items-start">
            <span className="text-xs opacity-90">{getTotalItems()} items</span>
            <span className="font-bold text-sm">{formatCurrency(getTotalPrice())}</span>
          </div>
        </button>
      )}
    </div>
  );

  // Render based on current view
  switch (currentView) {
    case 'cart':
      return <CartView />;
    case 'checkout':
      return <CheckoutView />;
    case 'orderConfirm':
      return <OrderConfirmView />;
    default:
      return <MenuView />;
  }
};

export default RestaurantApp;
